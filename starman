#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)

if [ -f "$HOME/opt/.flatpak.env" ]; then
    . "$HOME/opt/.flatpak.env"
fi


add_executables_to_flatpak_env() {
    local target_dir="$EXPORT_PATH/$pkg"

    mapfile -t exec_dirs < <(find "$target_dir" -type f -executable -exec dirname {} \; | sort -u)

    if [[ ${#exec_dirs[@]} -eq 0 ]]; then
        echo "No executables found to add to .flatpak.env."
        return
    fi

    local env_file="$HOME/opt/.flatpak.env"
    touch "$env_file"

    for dir in "${exec_dirs[@]}"; do
        dir=$(realpath "$dir")

        if ! grep -q "add_to_path \"$dir\"" "$env_file"; then
            echo "add_to_path \"$dir\"" >> "$env_file"
            echo "Added '$dir' to PATH in $env_file"
        else
            echo "'$dir' already in $env_file PATH"
        fi
    done

    echo "source $env_file or restart your shell to run new executables."
}

fix_exec_permissions() {
    local target="$1"
    if [[ -d "$target" ]]; then
        echo "Fixing execute permissions in $target ..."
        find "$target" -type d \( -name bin -o -name sbin \) -exec chmod -R +x {} \;
        find "$target" -type f -exec chmod +x {} \;
    fi
}

starman() {
    local EXPORT_PATH="${STARMAN_EXPORT_PATH:-$HOME/opt/bin}"
    local pkg=""
    local FILE=""
    local downloaded=0

    while [[ $# -gt 0 ]]; do
        case "$1" in
            -S|--needed|--noconfirm|-Sy|-Syu|-Syyu) shift ;;
            -*|--*) echo "${RED}Unsupported flag: $1${RESET}" >&2; return 1 ;;
            *) pkg="$1"; shift ;;
        esac
    done

    if [[ -z "$pkg" ]]; then
        echo "${RED}Error: You must provide a package name or archive URL.${RESET}" >&2
        return 1
    fi

    mkdir -p "$EXPORT_PATH"

    if [[ "$pkg" =~ ^https?://archlinux.org/packages/.+[^/](/)?$ ]]; then
        pkg="${pkg%/}/download"
        local real_url
        real_url=$(curl -Ls -o /dev/null -w '%{url_effective}' "$pkg")

        if [[ "$real_url" =~ \.(tar\.(gz|bz2|xz|zst|lz4|lzma|lz)?|tgz|sh|run|bin|pkg\.tar\.(zst|xz))$ ]]; then
            local filename
            filename=$(curl -sIL "$real_url" | grep -i '^content-disposition:' | sed -n 's/.*filename="\?\([^"]*\)"\?.*/\1/p' | tail -1)
            [[ -z "$filename" ]] && filename=$(basename "$real_url")
            [[ "$filename" == "download" || -z "$filename" ]] && filename="${pkg##*/}"

            FILE="$HOME/$filename"
            echo "${YELLOW}Downloading to: $FILE${RESET}"
            curl -L "$real_url" -o "$FILE" || {
                echo "${RED}Failed to download file.${RESET}" >&2
                return 1
            }
            downloaded=1
        else
            echo "${YELLOW}Warning: '$pkg' redirects to an unsupported file format: $real_url${RESET}"
            return 1
        fi
    elif [[ -f "$pkg" ]]; then
        FILE="$pkg"
        echo "${CYAN}starman installing from local file: $FILE${RESET}"
    elif [[ "$pkg" =~ ^[a-zA-Z0-9._+-]+$ ]]; then
        echo "${BLUE}starman assuming package name: $pkg${RESET}"

        local AUR_URL="https://aur.archlinux.org/cgit/aur.git/snapshot/${pkg}.tar.gz"
        FILE="$HOME/$pkg.tar.gz"
        if curl -fsSL "$AUR_URL" -o "$FILE"; then
            echo "${GREEN}Downloaded AUR package: $pkg${RESET}"
            downloaded=1
        else
            echo "${YELLOW}AUR package not found. Trying official Arch repo...${RESET}"

            local ARCH_URL="https://archlinux.org/packages/extra/x86_64/${pkg}/download"
            real_url=$(curl -Ls -o /dev/null -w '%{url_effective}' "$ARCH_URL")

            local filename
            filename=$(curl -sIL "$real_url" | grep -i '^content-disposition:' | sed -n 's/.*filename="\?\([^"]*\)"\?.*/\1/p' | tail -1)
            [[ -z "$filename" ]] && filename=$(basename "$real_url")
            [[ "$filename" == "download" || -z "$filename" ]] && filename="${pkg}.pkg.tar.zst"

            FILE="$HOME/$filename"
            echo "${YELLOW}Downloading from Arch repo to: $FILE${RESET}"
            curl -L "$real_url" -o "$FILE" || {
                echo "${RED}Failed to download from Arch repo: $pkg${RESET}" >&2
                return 1
            }
            downloaded=1
        fi
    else
        echo "${RED}Unrecognized input: $pkg${RESET}"
        return 1
    fi

    case "$FILE" in
        *.tar.gz|*.tgz)
            echo "Extracting $FILE to $EXPORT_PATH ..."
            tar -xvzf "$FILE" -C "$EXPORT_PATH"
            ;;
        *.tar.bz2|*.tbz2)
            echo "Extracting $FILE to $EXPORT_PATH ..."
            tar -xvjf "$FILE" -C "$EXPORT_PATH"
            ;;
        *.tar.xz|*.txz|*.tar.lzma)
            echo "Extracting $FILE to $EXPORT_PATH ..."
            tar -xvJf "$FILE" -C "$EXPORT_PATH"
            ;;
        *.tar.zst|*.tzst)
            echo "Extracting zst archive $FILE to $EXPORT_PATH ..."
            mkdir -p "$EXPORT_PATH"
            if command -v unzstd >/dev/null 2>&1; then
                tar --use-compress-program=unzstd -xvf "$FILE" -C "$EXPORT_PATH"
            elif command -v zstd >/dev/null 2>&1; then
                zstd -d "$FILE" -c | tar -xvf - -C "$EXPORT_PATH"
            else
                echo "${RED}Error: zstd/unzstd not installed, cannot extract $FILE${RESET}" >&2
                return 1
            fi
            ;;
        *.tar.lz4)
            echo "Extracting lz4 archive $FILE to $EXPORT_PATH ..."
            tar --use-compress-program=lz4 -xvf "$FILE" -C "$EXPORT_PATH"
            ;;
        *.tar.lz)
            echo "Extracting lzip archive $FILE to $EXPORT_PATH ..."
            tar --use-compress-program=lzip -xvf "$FILE" -C "$EXPORT_PATH"
            ;;
        *.tar.Z)
            echo "Extracting compressed tar $FILE to $EXPORT_PATH ..."
            tar -xvZf "$FILE" -C "$EXPORT_PATH"
            ;;
        *.tar)
            echo "Extracting tar $FILE to $EXPORT_PATH ..."
            tar -xvf "$FILE" -C "$EXPORT_PATH"
            ;;
        *.zip)
            echo "Extracting zip $FILE to $EXPORT_PATH ..."
            unzip -o "$FILE" -d "$EXPORT_PATH"
            ;;
        *)
            echo "Unknown archive type: $FILE"
            ;;
    esac

if [[ -d "$EXPORT_PATH/usr/bin" ]]; then
    echo "Adding usr/bin executables to $EXPORT_PATH"
    cp -a "$EXPORT_PATH/usr/bin/." "$EXPORT_PATH/"
fi

if [[ -d "$EXPORT_PATH/usr/lib" ]]; then
    mkdir -p "$EXPORT_PATH/lib"
    echo "Adding usr/lib shared libraries to $EXPORT_PATH/lib"
    cp -a "$EXPORT_PATH/usr/lib/." "$EXPORT_PATH/lib/"
fi

    fix_exec_permissions "$EXPORT_PATH/$pkg"
    fix_exec_permissions "$EXPORT_PATH/usr"
    fix_exec_permissions "$EXPORT_PATH/bin"
    
    if [[ "$pkg" =~ ^[a-zA-Z0-9._+-]+$ ]]; then
        local pkgdir="$EXPORT_PATH/$pkg"
        mkdir -p "$pkgdir"
        tar -xf "$FILE" -C "$pkgdir"
    
        local PKGBUILD="$pkgdir/PKGBUILD"
        local SRCINFO="$pkgdir/.SRCINFO"
    
        if [[ -f "$PKGBUILD" || -f "$SRCINFO" ]]; then
            echo "${CYAN}starman found PKGBUILD or .SRCINFO. Attempting to parse...${RESET}"
    
            if [[ -f "$PKGBUILD" ]]; then
                source <(grep -E '^(pkgname|pkgver)=' "$PKGBUILD")
            else
                pkgname=$(grep -E '^pkgname\s*=' "$SRCINFO" | awk '{print $3}')
                pkgver=$(grep -E '^pkgver\s*=' "$SRCINFO" | awk '{print $3}')
            fi
    
            ARCH=$(uname -m)
            case "$ARCH" in
                x86_64) arch="x86_64" ;;
                aarch64|arm64) arch="aarch64" ;;
                *) arch="x86_64" ;;
            esac
    
            src_line=""
            if [[ -f "$PKGBUILD" ]]; then
                # Trim leading spaces and try arch-specific source first
                src_line=$(grep -E "^\s*source_${arch}=" "$PKGBUILD")
                # Fallback to plain source=
                [[ -z "$src_line" ]] && src_line=$(grep -E "^\s*source=" "$PKGBUILD")
            fi
            
            # If still empty, try .SRCINFO
            if [[ -z "$src_line" && -f "$SRCINFO" ]]; then
                src_line=$(grep -E "^\s*source" "$SRCINFO" | awk '{print $3}')
            fi
            
            if [[ -z "$src_line" ]]; then
                echo "${RED}Could not find any source in PKGBUILD or .SRCINFO${RESET}"
                return 1
            fi
            
            # Remove the array parentheses and quotes
            src_array=$(echo "$src_line" | sed -E 's/^[^=]+=\(\s*(.*)\s*\)/\1/' | tr -d '"'\''')
            read -ra src_entries <<< "$src_array"
            
            for entry in "${src_entries[@]}"; do
                # Handle 'name::url' format
                if [[ "$entry" == *::* ]]; then
                    url=${entry#*::}
                else
                    url=$entry
                fi
                eval "expanded_url=\"$url\""
                if [[ "$expanded_url" == http* ]]; then
                    extfile="$HOME/${pkgname}-${pkgver}-${arch}.${expanded_url##*.}"
                    echo "${YELLOW}starman downloading source from PKGBUILD: $expanded_url${RESET}"
                    curl -L "$expanded_url" -o "$extfile" && {
                        case "$extfile" in
                            *.zip) unzip -o "$extfile" -d "$EXPORT_PATH/$pkgname" ;;
                            *.tar.gz) tar -xzf "$extfile" -C "$EXPORT_PATH/$pkgname" ;;
                            *.tar.xz) tar -xJf "$extfile" -C "$EXPORT_PATH/$pkgname" ;;
                            *.tar.bz2) tar -xjf "$extfile" -C "$EXPORT_PATH/$pkgname" ;;
                            *.tar.zst) tar --use-compress-program=unzstd -xvf "$extfile" -C "$EXPORT_PATH/$pkgname" ;;
                            *) echo "${RED}Unsupported archive in PKGBUILD: $extfile${RESET}" ;;
                        esac
                        rm -f "$extfile"
                        echo "${GREEN}starman extracted archive to $EXPORT_PATH/$pkgname${RESET}"
                    }
                    break
                fi
            done
        fi
    fi


    if [[ "$pkg" =~ ^[a-zA-Z0-9._+-]+$ ]]; then
        add_executables_to_flatpak_env
    fi

    [[ "$downloaded" -eq 1 ]] && rm -f "$FILE"
    echo "${GREEN}Done.${RESET}"
}

update_app_list_cache() {
    flatpak --user list --columns=application,name | tail -n +1 | sort -u > "$HOME/.starman_flatpak_cache"
}

lookup_flatpak_alias() {
  local name="$1"
  grep -i "$name" "$HOME/.starman_flatpak_cache" | head -n1 | cut -f1
}

cmd_name=$(basename "$0")

if [[ "$cmd_name" =~ ^(yay|paru|pacaur|pacman)$ ]]; then
  echo "${MAGENTA}starman emulating: $cmd_name${RESET}"

  declare -a packages=()
  skip_next_arg=0
  while [[ $# -gt 0 ]]; do
    arg="$1"
    shift

    if [[ "$skip_next_arg" -eq 1 ]]; then
        skip_next_arg=0
        continue
    fi

    case "$arg" in
      -S|-Sy|-Syu|-Syyu|--noconfirm|--needed)
        ;;
      -Rns)
        shift
        for pkg in "$@"; do
          local found=""
          for dir in "$HOME/opt/bin" "$HOME/opt/flatpak-deps" "$HOME/opt/usr/bin"; do
            found=$(find "$dir" -maxdepth 1 -type f -name "$pkg" 2>/dev/null | head -n1)
            if [[ -n "$found" ]]; then
              echo "${YELLOW}starman removing $found${RESET}"
              rm -f "$found"
            fi
          done
          if [[ -z "$found" ]]; then
            echo "${RED}starman could not find installed file for '$pkg'.${RESET}"
          fi
        done
        update_app_list_cache
        exit 1
        ;;
      -Qi)
        echo "${CYAN}starman info for $2:${RESET}"
        echo "Name            : $2"
        echo "Version         : 1.0.0"
        echo "Description     : AUR package for compatibility"
        echo "Install Date    : $(date)"
        exit 1
        ;;
      -*)
        echo "${RED}starman unsupported flag: $arg${RESET}"
        exit 1
        ;;
      *)
        packages+=("$arg")
        ;;
    esac
  done

  if [ "${#packages[@]}" -eq 0 ]; then
    echo "${RED}[starman] No packages specified.${RESET}"
    exit 1
  fi

  for pkg in "${packages[@]}"; do
    echo "${CYAN}[starman] Downloading archive for: $pkg${RESET}"
    STARMAN_EXPORT_PATH="$HOME/opt/bin" starman "$pkg"
  done
  exit 0
fi


show_help() {
    echo "${YELLOW}"
    echo "Commands with examples:"
    echo ""
    echo "starman                # Open GUI app launcher"
    echo "starman refresh        # Update app list"
    echo ""
    echo "Install packages in different ways:"
    echo "pacman https://archlinux.org/packages/extra/x86_64/libvlc/"
    echo "pacman vlc"
    echo ""
    echo "Emulates yay,pacaur, paru, and pacman. "
    echo ""
    echo "${RESET}"
}

zenity_launcher() {
    local ICON_SIZES=("256" "128")
    local ICON_OUTPUT_BASE="$HOME/.local/share/icons/hicolor"
    local APP_LIST_FILE="$HOME/.starman_flatpak_cache"
    local MENU_ENTRIES=()

    MENU_ENTRIES+=("browse_files" "Browse - Copy directories to terminal")
    MENU_ENTRIES+=("download_archive" "Automatically detects compression type and extracts tar file. Append your path at the end of link or blank for default")
    MENU_ENTRIES+=("download_appimage" "Download AppImage: Paste URL, save to ~/opt/appimages, and run it")

    update_app_list_cache

    while IFS=$'\t' read -r APPID NAME; do
        [[ -z "$APPID" || "$APPID" == "Application" ]] && continue

        local ICON_PATH=""
        for SIZE in "${ICON_SIZES[@]}"; do
            local TRY_ICON="$ICON_OUTPUT_BASE/${SIZE}x${SIZE}/apps/$APPID.png"
            if [[ -f "$TRY_ICON" ]]; then
                ICON_PATH="$TRY_ICON"
                break
            fi
        done

        if [[ -n "$ICON_PATH" ]]; then
            MENU_ENTRIES+=("$APPID" "Launch $NAME via Flatpak")
        fi
    done < "$APP_LIST_FILE"

    MENU_ENTRIES+=("Exit" "Close this menu")
    local CHOICE
    CHOICE=$(zenity --list --title="Steam Tar Manager" \
      --width=800 --height=600 \
      --column="Action" --column="Description" \
      "${MENU_ENTRIES[@]}")

     case "$CHOICE" in
        browse_files)
            zenity --file-selection --directory --title="Select a Folder to Browse"
            ;;
           download_archive)
            FILE_URL=$(zenity --entry --title="Steam Tar Manager" --text="Enter the URL of the .tar or .zip archive:")
            [[ -z "$FILE_URL" ]] && break
        
            EXTRACT_PATH="$HOME/opt/bin"
            mkdir -p "$EXTRACT_PATH"
            mkdir -p "$HOME/tmp"
            TMP_FILE="$HOME/tmp/$(basename "${FILE_URL%%\?*}")"
        
            echo "${CYAN}[starman] Downloading: $FILE_URL${RESET}"
            if ! curl -L -o "$TMP_FILE" "$FILE_URL"; then
                zenity --error --title="Download Failed" --text="Failed to download $FILE_URL"
                break
            fi
        
            echo "${CYAN}[starman] Extracting $TMP_FILE to $EXTRACT_PATH${RESET}"
            case "$TMP_FILE" in
                *.tar.gz|*.tgz)
                    tar -xvzf "$TMP_FILE" -C "$EXTRACT_PATH" ;;
                *.tar.bz2|*.tbz2)
                    tar -xvjf "$TMP_FILE" -C "$EXTRACT_PATH" ;;
                *.tar.xz|*.txz|*.tar.lzma)
                    tar -xvJf "$TMP_FILE" -C "$EXTRACT_PATH" ;;
                *.tar.zst|*.tzst)
                    if command -v unzstd >/dev/null 2>&1; then
                        tar --use-compress-program=unzstd -xvf "$TMP_FILE" -C "$EXTRACT_PATH"
                    elif command -v zstd >/dev/null 2>&1; then
                        zstd -d "$TMP_FILE" -c | tar -xvf - -C "$EXTRACT_PATH"
                    else
                        zenity --error --title="Extraction Failed" --text="zstd/unzstd not installed, cannot extract $TMP_FILE"
                        break
                    fi
                    ;;
                *.tar.lz4)
                    tar --use-compress-program=lz4 -xvf "$TMP_FILE" -C "$EXTRACT_PATH" ;;
                *.tar.lz)
                    tar --use-compress-program=lzip -xvf "$TMP_FILE" -C "$EXTRACT_PATH" ;;
                *.tar.Z)
                    tar -xvZf "$TMP_FILE" -C "$EXTRACT_PATH" ;;
                *.tar)
                    tar -xvf "$TMP_FILE" -C "$EXTRACT_PATH" ;;
                *.zip)
                    unzip -o "$TMP_FILE" -d "$EXTRACT_PATH" ;;
                *)
                    zenity --error --title="Extraction Failed" --text="Unknown archive type: $TMP_FILE"
                    break
                    ;;
            esac
        
            echo "${GREEN}[starman] Extraction complete to $EXTRACT_PATH${RESET}"
            rm -f "$TMP_FILE"
            fix_exec_permissions "$EXTRACT_PATH"

            ;;

        download_appimage)
            APPIMAGE_URL=$(zenity --entry --title="Download AppImage" --text="Paste the URL of the .AppImage file:")
            if [[ -n "$APPIMAGE_URL" ]]; then
                mkdir -p "$HOME/opt/appimages"
                cd "$HOME/opt/appimages" || exit 1
                fix_exec_permissions "$HOME/opt/appimages" 
                echo "${YELLOW}Downloading to: $PWD${RESET}"
                if curl -L -J -O "$APPIMAGE_URL"; then
                    FILENAME=$(basename "$(curl -s -L -I "$APPIMAGE_URL" | grep -i 'filename=' | sed -E 's/.*filename="?([^"]+)"?/\1/')")
                    [[ -z "$FILENAME" || ! -f "$FILENAME" ]] && FILENAME=$(basename "${APPIMAGE_URL%%\?*}")

                    chmod +x "$FILENAME"
                    "./$FILENAME" &
                    echo "${GREEN}Launched: $FILENAME${RESET}"
                else
                    zenity --error --title="Download Failed" --text="Failed to download AppImage from:\n$APPIMAGE_URL"
                fi
            fi
            ;;
    run_installer)
        INSTALLER_PATH=$(zenity --entry --title="Run Installer" --text="Enter URL or local path of the .sh installer script:")
        if [[ -z "$INSTALLER_PATH" ]]; then
            break
        fi

        if [[ "$INSTALLER_PATH" =~ ^https?:// ]]; then
            TMP_INSTALLER="$HOME/tmp/installer_$(date +%s).sh"
            mkdir -p "$HOME/tmp"
            echo "${YELLOW}Downloading installer to $TMP_INSTALLER...${RESET}"
            if curl -L -o "$TMP_INSTALLER" "$INSTALLER_PATH"; then
                chmod +x "$TMP_INSTALLER"
                echo "${GREEN}Running installer...${RESET}"
                bash "$TMP_INSTALLER"
                rm -f "$TMP_INSTALLER"
            else
                zenity --error --title="Download Failed" --text="Failed to download installer script."
            fi
        else
            if [[ -f "$INSTALLER_PATH" && "$INSTALLER_PATH" == *.sh ]]; then
                chmod +x "$INSTALLER_PATH"
                echo "${GREEN}Running local installer...${RESET}"
                bash "$INSTALLER_PATH"
            else
                zenity --error --title="Invalid File" --text="The specified file is not a valid .sh script."
            fi
        fi
        ;;
    Exit|"")
        exit 0
        ;;
    *)
        flatpak --user run "$CHOICE" &
        ;;
esac
}

reset_app_list() {
    rm -f "$HOME/.starman_flatpak_cache"
    echo "${YELLOW}Flatpak app list cache cleared.${RESET}"
}

set_default_app() {
    local APP_LIST_FILE="$HOME/.starman_flatpak_cache"
    update_app_list_cache

    mapfile -t APPS < <(cut -f1 "$APP_LIST_FILE")
    mapfile -t NAMES < <(cut -f2 "$APP_LIST_FILE")

    echo "Installed Flatpak apps:"
    for i in "${!APPS[@]}"; do
        echo "[$i] ${NAMES[i]} (${APPS[i]})"
    done

    echo
    read -rp "Enter the number of the app to set as default: " appnum
    if ! [[ "$appnum" =~ ^[0-9]+$ ]] || (( appnum < 0 || appnum >= ${#APPS[@]} )); then
        echo "Invalid selection."
        exit 1
    fi

    local selected_app="${APPS[appnum]}"
    local desktop_file="${selected_app}.desktop"
    echo "Selected app: ${NAMES[appnum]} ($desktop_file)"

    echo ""
    echo "Enter the extension to assign; separate by commas."
    echo "Examples: .html, .pdf, mp3, http, https"
    read -rp "Extensions/schemes: " extlist

    IFS=',' read -ra extensions <<< "$extlist"

    for ext in "${extensions[@]}"; do
        ext="${ext#"${ext%%[![:space:]]*}"}"
        ext="${ext%"${ext##*[![:space:]]}"}"

        ext="${ext#.}"

        if [[ -z "$ext" ]]; then
            echo "Skipping empty extension"
            continue
        fi

        local mime_type=""
        case "$ext" in
            http|https|ftp|mailto)
                mime_type="x-scheme-handler/$ext"
                ;;
            *)
                local tmpfile
                tmpfile="$(mktemp --suffix=.$ext)"
                mime_type=$(xdg-mime query filetype "$tmpfile")
                rm -f "$tmpfile"

                if [[ -z "$mime_type" ]]; then
                    mime_type=$(grep -h "^[^#].*:\\*\\.$ext\$" ~/.local/share/mime/globs /usr/share/mime/globs 2>/dev/null | cut -d: -f1 | head -n1)
                fi

                if [[ -z "$mime_type" ]]; then
                    echo "Warning: Could not determine MIME type for .$ext, skipping."
                    continue
                fi
                ;;
        esac

        echo "Setting default for $ext ($mime_type) to $desktop_file"
        xdg-mime default "$desktop_file" "$mime_type"
    done

    echo "Done."
}

main() {
    case "$1" in
        starman)
            shift
            starman "$@" || return 1
            ;;
        --h|-h|help)
            show_help
            ;;
        default)
            set_default_app || return 1
            ;;
        refresh)
            update_app_list_cache
            echo "${GREEN}Starman app list refreshed.${RESET}"
            ;;
        ""|status)
            zenity_launcher || return 1
            ;;
        reset)
            reset_app_list
            ;;
        *)
            echo "${RED}Unknown command '$1'${RESET}"
            show_help
            return 1
            ;;
    esac
}

main "$@"
