#!/bin/bash
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
BOLD=$(tput bold)
RESET=$(tput sgr0)
DISPLAY_SCALING=""
CURSOR_SIZE=""
ICON_SIZE=256
ICON_OUTPUT_BASE=/usr/local/aurora//.local/share/icons/hicolor"

if [ -f /usr/local/aurora/.flatpak.env" ]; then
    . /usr/local/aurora/.flatpak.env"
fi

set_display_scaling() {
    local input="$1"

    if [[ "$input" =~ ^[0-9]+([.][0-9]+)?$ ]]; then
        local scale=$(printf "%.2f" "$input")

        if (( $(awk "BEGIN {print ($scale < 0.25)}") )); then
            echo "${RED}Warning: DISPLAY_SCALING below 0.25, resetting to 1.0${RESET}" >&2
            scale=1.0
        elif (( $(awk "BEGIN {print ($scale > 4.0)}") )); then
            echo "${RED}Warning: DISPLAY_SCALING above 4.0, resetting to 4.0${RESET}" >&2
            scale=4.0
        fi

        export AURORA_SCALE="$scale"
        export GDK_SCALE="$AURORA_SCALE"
        export GDK_DPI_SCALE=1
        export QT_SCALE_FACTOR="$AURORA_SCALE"
        export QT_AUTO_SCREEN_SCALE_FACTOR=1
        export ELECTRON_FORCE_DEVICE_SCALE_FACTOR="$AURORA_SCALE"
        export _JAVA_OPTIONS="-Dsun.java2d.uiScale=$AURORA_SCALE"

        echo "${GREEN}Display scaling set to $AURORA_SCALE${RESET}" >&2
    else
        echo "${RED}Error: DISPLAY_SCALING must be a number between 0.25 and 4.0 (e.g., 1, 1.5, 2.25)${RESET}" >&2
        return 1
    fi
}

: "${AURORA_SCALE:=1.25}"
: "${XCURSOR_SIZE:=32}"

export GDK_SCALE="$AURORA_SCALE"
export GDK_DPI_SCALE=1

export QT_SCALE_FACTOR="$AURORA_SCALE"
export QT_AUTO_SCREEN_SCALE_FACTOR=1

export ELECTRON_FORCE_DEVICE_SCALE_FACTOR="$AURORA_SCALE"
export _JAVA_OPTIONS="-Dsun.java2d.uiScale=$AURORA_SCALE"

export XCURSOR_SIZE


shortcut() {
    if ! flatpak --user info org.inkscape.Inkscape &>/dev/null; then
        echo "${BLUE}Inkscape is required. Installing...${RESET}" >&2
        flatpak --user install -y flathub org.inkscape.Inkscape || {
            echo "${RED}Failed to install Inkscape.${RESET}" >&2
            return 1
        }
    fi

    ICON_OUTPUT_BASE=/usr/local/aurora/.local/share/icons/hicolor"
    BIN_DIR=/usr/local/aurora/bin"
    DESKTOP_DIR=/usr/local/aurora/.local/share/applications"
    mkdir -p "$BIN_DIR" "$DESKTOP_DIR"

    flatpak --user list --columns=application | tail -n +1 | while read -r APPID; do
        BASE_PATH=/usr/local/aurora/.local/share/flatpak/app/$APPID/current/active/export/share/icons/hicolor"
        [[ -d "$BASE_PATH" ]] || continue

        flatpak override --user org.inkscape.Inkscape --filesystem="$BASE_PATH"

        ICON=$(find "$BASE_PATH" -mindepth 3 -maxdepth 3 \
            \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.svg" \) \
            \( -ipath "*/256x256/*" -o -ipath "*/128x128/*" \) 2>/dev/null \
            | sort | grep -Ei '(256x256|128x128).*\.((png|jpg|jpeg|svg))$' | head -n1)

        if [[ -z "$ICON" ]]; then
            ICON=$(find "$BASE_PATH" -mindepth 3 -maxdepth 3 \
                \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.svg" \) \
                -ipath "*/scalable/apps/*" -type f 2>/dev/null | head -n1)
            ICON_SIZE=256
        else
            ICON_SIZE=$(echo "$ICON" | grep -oE '[0-9]{2,4}x[0-9]{2,4}' | cut -d'x' -f1)
        fi

        [[ -z "$ICON" ]] && continue
        ICON_SIZE="${ICON_SIZE:-256}"

        OUTDIR="$ICON_OUTPUT_BASE/${ICON_SIZE}x${ICON_SIZE}/apps"
        OUTFILE="$OUTDIR/${APPID}.png"
        mkdir -p "$OUTDIR"

        echo "${MAGENTA}Processing icon for $APPID...${RESET}"
        EXT_LOWER="${ICON##*.}"
        EXT_LOWER="${EXT_LOWER,,}"

        if [[ ! -f "$OUTFILE" ]]; then
            case "$EXT_LOWER" in
                png|jpg|jpeg)
                    cp "$ICON" "$OUTFILE"
                    ;;
                svg)
                    flatpak --user run org.inkscape.Inkscape \
                        --export-type=png \
                        --export-filename="$OUTFILE" \
                        -w "$ICON_SIZE" \
                        "$ICON" 2>/dev/null
                    ;;
            esac
        fi

        SCRIPT_NAME="${APPID//./_}.sh"
        BIN_FILE="$BIN_DIR/$SCRIPT_NAME"

        cat > "$BIN_FILE" <<EOF
#!/bin/bash
[ -f "/usr/local/aurora/.flatpak.env" ] && . "/usr/local/aurora/.flatpak.env"
flatpak run --user $APPID "\$@"
EOF
        chmod +x "$BIN_FILE"
        echo "${BLUE}Launcher script saved to $BIN_FILE${RESET}"

        raw_name="${APPID##*.}"
        NAME="$(tr '[:lower:]' '[:upper:]' <<< "${raw_name:0:1}")${raw_name:1}"

        DESKTOP_FILE="$DESKTOP_DIR/${APPID}.desktop"

        cat > "$DESKTOP_FILE" <<EOF
[Desktop Entry]
Name=$NAME
Exec=$BIN_FILE
Icon=${APPID}
Terminal=false
Type=Application
Categories=Utility;
EOF

        chmod +x "$DESKTOP_FILE"
        echo "${CYAN}Shortcut saved to $DESKTOP_FILE${RESET}"
    done

    # Native/extracted apps (ELF only, one shortcut per app folder)
    for NATIVE_BIN_DIR in /usr/local/aurora/bin"; do
        find "$NATIVE_BIN_DIR" -mindepth 1 -maxdepth 1 -type d | while read -r pkgdir; do
            folder_name=$(basename "$pkgdir")
            exe=""

            candidate=$(find "$pkgdir" -type f -iname "$folder_name" -executable 2>/dev/null | head -n1)
            if [[ -x "$candidate" ]]; then
                exe="$candidate"
            else
                direct="$pkgdir/$folder_name"
                [[ -x "$direct" ]] && exe="$direct"
            fi

            if [[ -z "$exe" ]]; then
               mapfile -t elf_executables < <(
                    find "$pkgdir" -maxdepth 1 -type f -executable 2>/dev/null \
                        | grep -vEi '\.(so|dll|bak|old|txt|md|ini|conf|json|yaml|sh|py|pl)$' \
                        | while read -r file; do
                            file "$file" | grep -q 'ELF .* executable' && echo "$file"
                        done
                )
                
                # Sanity blacklist
                helpers_regex='chrome-sandbox|chrome_crashpad_handler|xdg-mime|xdg-settings|resources\.pak|.*_pak$|v8_context_snapshot\.bin|lib.*\.so|MEIPreload|.*\.desktop'
                
                exe=""
                
                for f in "${elf_executables[@]}"; do
                    basefile=$(basename "$f")
                    # Lowercase, ignore extensions
                    if [[ "${basefile,,}" =~ ${folder_name,,} ]] && ! [[ "${basefile,,}" =~ $helpers_regex ]]; then
                        exe="$f"
                        break
                    fi
                done
                
                if [[ -z "$exe" ]]; then
                    for f in "${elf_executables[@]}"; do
                        basefile=$(basename "$f")
                        if ! [[ "${basefile,,}" =~ $helpers_regex ]]; then
                            exe="$f"
                            break
                        fi
                    done
                fi
                
                if [[ -z "$exe" && ${#elf_executables[@]} -gt 0 ]]; then
                    exe=$(printf "%s\n" "${elf_executables[@]}" \
                        | xargs -I{} stat -c "%s %n" {} 2>/dev/null \
                        | sort -nr | head -n1 | cut -d' ' -f2-)
                fi
                
                [[ -z "$exe" ]] && continue
            fi

            [[ -z "$exe" || ! -x "$exe" ]] && continue

            base=$(basename "$exe")
            shortname="$(tr '[:lower:]' '[:upper:]' <<< ${base:0:1})${base:1}"
            hash=$(echo "$exe" | sha1sum | cut -c1-6)
            uniquename="${shortname}_${hash}"

            icon=""
            icon=$(find "$pkgdir" -mindepth 1 -maxdepth 6 -type f \
                \( -iname "*icon*.png" -o -iname "*icon*.svg" -o -iname "*$base*.png" -o -iname "*$base*.svg" \) \
                2>/dev/null | head -n1)

            if [[ -z "$icon" ]]; then
                for size in 1024 512 256 128 64; do
                    icon=$(find "$pkgdir" -mindepth 1 -maxdepth 6 -type f \
                        \( -iname "*${size}*.png" -o -iname "*${size}*.jpg" -o -iname "*${size}*.svg" \) \
                        2>/dev/null | head -n1)
                    [[ -n "$icon" ]] && break
                done
            fi

            [[ -z "$icon" ]] && icon=$(find "$pkgdir" -mindepth 1 -maxdepth 6 -type f \
                \( -iname "*.png" -o -iname "*.jpg" -o -iname "*.svg" \) 2>/dev/null | head -n1)

            [[ -z "$icon" ]] && continue

            icon_size=$(echo "$icon" | grep -oE '1024|512|256|128|64' | head -n1)
            icon_size="${icon_size:-1024}"
            outdir="$ICON_OUTPUT_BASE/256x256/apps"
            mkdir -p "$outdir"
            outfile="$outdir/${uniquename}.png"
            ext="${icon##*.}"
            ext="${ext,,}"

            if [[ "$ext" == "svg" ]]; then
                flatpak --user run org.inkscape.Inkscape \
                    --export-type=png \
                    --export-filename="$outfile" \
                    -w 256 "$icon" 2>/dev/null
            else
                convert "$icon" -resize 256x256 "$outfile" 2>/dev/null || cp "$icon" "$outfile"
            fi

            [[ ! -f "$outfile" ]] && continue

            binlauncher="$BIN_DIR/${uniquename}.sh"
            cat > "$binlauncher" <<EOF
#!/bin/bash
[ -f "/usr/local/aurora/.flatpak.env" ] && . "/usr/local/aurora/.flatpak.env"
exec "$exe" "\$@"
EOF
            chmod +x "$binlauncher"

            desktop_file="$DESKTOP_DIR/${uniquename}.desktop"
            cat > "$desktop_file" <<EOF
[Desktop Entry]
Name=$shortname
Exec=$binlauncher
Icon=$uniquename
Terminal=false
Type=Application
Categories=Utility;
EOF
            chmod +x "$desktop_file"
            echo "${CYAN}Created shortcut for $shortname ($uniquename)${RESET}"
        done
    done
}

show_help() {
    echo "${MAGENTA}${BOLD}"
    echo "Commands with examples:"
    echo "${RESET}${MAGENTA}"
    echo "aurora                     # Show current display and cursor values"
    echo "source aurora display 1.0  # Set display scaling factor (0.25 - 4.0)"
    echo "source aurora cursor 32    # Set cursor size (8 - 200)"
    echo "aurora help                # Show help"
    echo "aurora version             # See version and check for updates"
    echo "aurora shortcut            # Create desktop shortcuts"
    echo "aurora_debug               # echo a list of paths that flatpak can use"
    echo "aurora reinstall           # Redownload Aurora from Github"
    echo "aurora uninstall           # Launch uninstaller"
    echo "${RESET}${YELLOW}"
    echo "starman                    # Launch starman menu"
    echo "starman refresh            # Refresh starman applauncher shortcuts"
    echo "starman help               # Show help"
    echo "starman example:"
    echo "pacman https://archlinux.org/packages/extra/x86_64/libvlc/"
    echo "pacman vlc"
    echo "${RESET}"
    echo "${GREEN}flatpak list               # Show list of installed apps"
    echo "flatpak --help             # flatpak has a lot of commands!${RESET}"
    echo "${BLUE}${BOLD}"
    echo "Normal flatpak example:${RESET}${BLUE}"
    echo ""
    echo "flatpak search Discord"
    echo "flatpak install com.discordapp.Discord"
    echo "flatpak run com.discordapp.Discord${RESET}"
    echo "${BLUE}${BOLD}"
    echo "Failed to connect to bus error - run like examples below:"
    echo "${RESET}${CYAN}"
    echo "Visual Studio:"
    echo ""
    echo "flatpak search visualstudio"
    echo "flatpak install com.visualstudio.code"
    echo "flatpak run --command=sh com.visualstudio.code"
    echo "/app/bin/code --no-sandbox --no-zygote --disable-gpu-sandbox --disable-features=UsePortal"
    echo ""
    echo "Brave Browser:"
    echo "flatpak run --command=sh com.brave.Browser"
    echo "/app/brave/brave --no-sandbox --no-zygote &"
    echo ""
    echo "${RESET}${CYAN}${BOLD}Use ls /app/ to help find the app in these situations."
    echo "${RESET}"
}

aurora_uninstall() {
    echo ""
    echo "${MAGENTA}${BOLD}Aurora Uninstaller${RESET}"
    echo "${BLUE}${BOLD}Select an option:${RESET}"
    echo "${BLUE}[0] Quit${RESET}"
    echo "${CYAN}[1] Remove Aurora & Starman (/usr/local/aurora/bin/aurora and /usr/local/aurora/bin/starman only; keep Flatpak apps and data)${RESET}"
    echo "${MAGENTA}[2] Full uninstall (removes /usr/local/aurora/, all Flatpak apps/data, ~/.bashrc Aurora entries, and dependencies)${RESET}"
    echo ""
    read -rp "Enter choice [0-2]: " CHOICE

    case "$CHOICE" in
        0)
            echo "${BLUE}Quit.${RESET}"
            return 0
            ;;
        1)
            echo "${CYAN}Removing Aurora and Starman binaries (leaving apps/data)...${RESET}"
            if [ -e /usr/local/aurora/bin/aurora" ]; then
                rm -f /usr/local/aurora/bin/aurora"
                echo "${CYAN}Removed $HOME/opt/aurora${RESET}"
            else
                echo "${YELLOW}$HOME/opt/aurora not found.${RESET}"
            fi
            if [ -e /usr/local/aurora/bin/starman" ]; then
                rm -f /usr/local/aurora/bin/starman"
                echo "${CYAN}Removed $HOME/opt/starman${RESET}"
            else
                echo "${YELLOW}$HOME/opt/starman not found.${RESET}"
            fi
            echo "${CYAN}Aurora and Starman binaries removed; Flatpak apps and data retained.${RESET}"
            ;;
        2)
            echo "${MAGENTA}${BOLD}Full uninstall: Removing /usr/local/aurora/, ~/.local/share/flatpak, ~/.bashrc Aurora entries, and ~/.xdg-runtime-dir${RESET}"
            echo "${RED}${BOLD}WARNING: This will delete all Flatpak apps and their data.${RESET}"
            read -rp "Type 'yes' to confirm: " FULL_CONFIRM
            if [ "$FULL_CONFIRM" != "yes" ]; then
                echo "${GREEN}Full uninstall aborted. No changes made.${RESET}"
                return 1
            fi

            if grep -q "# >>> Aurora Flatpak Setup >>>" /usr/local/aurora//.bashrc"; then
                sed -i '/# >>> Aurora Flatpak Setup >>>/,/# <<< Aurora Flatpak Setup <<</d' /usr/local/aurora//.bashrc"
                echo "${CYAN}Removed Aurora Flatpak setup block from ~/.bashrc${RESET}"
            fi

            sed -i '/\.flatpak\.env/d' /usr/local/aurora//.bashrc"
            sed -i '/\.flatpak\.logic/d' /usr/local/aurora//.bashrc"

            for DIR in /usr/local/aurora/" /usr/local/aurora//.local/share/flatpak" /usr/local/aurora//.xdg-runtime-dir"; do
                if [ -e "$DIR" ]; then
                    rm -rf "$DIR"
                    echo "${MAGENTA}Removed $DIR${RESET}"
                else
                    echo "${YELLOW}$DIR not found.${RESET}"
                fi
            done

            echo "${CYAN}${BOLD}Full Aurora uninstall complete. All Flatpak dependencies, apps, data, and ~/.bashrc entries removed.${RESET}"
            ;;
        *)
            echo "${RED}Invalid choice. Exiting.${RESET}"
            return 1
            ;;
    esac
}


case "$1" in
    display)
        set_display_scaling "$2"
        ;;
    cursor)
        set_cursor_scaling "$2"
        ;;
    --h|-h|h|--help|-help|help)
        show_help
        ;;
    shortcut)
        shortcut
        ;;
    ""|status)
    echo "${CYAN}Aurora Environment Status:${RESET}"

    [[ -n "$AURORA_SCALE" ]] && \
        echo "${MAGENTA}AURORA_SCALE = $AURORA_SCALE${RESET}" || \
        echo "${BLUE}AURORA_SCALE remains default.${RESET}"

    [[ -n "$GDK_SCALE" ]] && \
        echo "${MAGENTA}GDK_SCALE = $GDK_SCALE${RESET}" || \
        echo "${BLUE}GDK_SCALE remains default.${RESET}"

    [[ -n "$GDK_DPI_SCALE" ]] && \
        echo "${MAGENTA}GDK_DPI_SCALE = $GDK_DPI_SCALE${RESET}" || \
        echo "${BLUE}GDK_DPI_SCALE remains default.${RESET}"

    [[ -n "$QT_SCALE_FACTOR" ]] && \
        echo "${MAGENTA}QT_SCALE_FACTOR = $QT_SCALE_FACTOR${RESET}" || \
        echo "${BLUE}QT_SCALE_FACTOR remains default.${RESET}"

    [[ -n "$QT_AUTO_SCREEN_SCALE_FACTOR" ]] && \
        echo "${MAGENTA}QT_AUTO_SCREEN_SCALE_FACTOR = $QT_AUTO_SCREEN_SCALE_FACTOR${RESET}" || \
        echo "${BLUE}QT_AUTO_SCREEN_SCALE_FACTOR remains default.${RESET}"

    [[ -n "$ELECTRON_FORCE_DEVICE_SCALE_FACTOR" ]] && \
        echo "${MAGENTA}ELECTRON_FORCE_DEVICE_SCALE_FACTOR = $ELECTRON_FORCE_DEVICE_SCALE_FACTOR${RESET}" || \
        echo "${BLUE}ELECTRON_FORCE_DEVICE_SCALE_FACTOR remains default.${RESET}"

    [[ -n "$_JAVA_OPTIONS" ]] && \
        echo "${MAGENTA}_JAVA_OPTIONS = $_JAVA_OPTIONS${RESET}" || \
        echo "${BLUE}_JAVA_OPTIONS remains default.${RESET}"

    [[ -n "$XCURSOR_SIZE" ]] && \
        echo "${MAGENTA}XCURSOR_SIZE = $XCURSOR_SIZE${RESET}" || \
        echo "${BLUE}XCURSOR_SIZE remains default.${RESET}"
    ;;
      reinstall)
        echo ""
        echo "${MAGENTA}${BOLD}Aurora Reinstall:${RESET}"
        echo ""
        echo "${CYAN}[0] Quit${RESET}"
        echo "${BLUE}[1] Quick reinstall - only download core Aurora files${RESET}"
        echo "${MAGENTA}[2] Full reinstall - download all files and dependencies${RESET}"
        echo ""
        read -rp "Enter your choice [0-2]: " CHOICE

        case "$CHOICE" in
            0)
                echo "${BLUE}Cancelled.${RESET}"
                exit 0
                ;;
            1)
                echo ""
                echo "${GREEN}Performing quick reinstall...${RESET}"
                echo ""
                mkdir -p /usr/local/bin
                
                for file in .flatpak.logic aurora starman version .flatpak.env; do
                    echo "${GREEN}Downloading $file...${RESET}"
                    (
                      LD_LIBRARY_PATH=""
                      curl -L "https://raw.githubusercontent.com/shadowed1/Aurora/main/$file" -o /usr/local/aurora/$file"
                    )
                    sleep 1
                done

                chmod +x /usr/local/bin/aurora
                chmod +x /usr/local/bin/starman
                rm /usr/local/aurora/bin/yay" 2>/dev/null
                rm /usr/local/aurora/bin/paru" 2>/dev/null
                rm /usr/local/aurora/bin/pacaur" 2>/dev/null
                rm /usr/local/aurora/bin/pacman" 2>/dev/null
                unset -f yay 2>/dev/null
                unset -f paru 2>/dev/null
                unset -f pacaur 2>/dev/null
                unset -f pacman 2>/dev/null
                ln -sf /usr/local/aurora/bin/starman" /usr/local/aurora/bin/yay"
                ln -sf /usr/local/aurora/bin/starman" /usr/local/aurora/bin/paru"
                ln -sf /usr/local/aurora/bin/starman" /usr/local/aurora/bin/pacaur"
                ln -sf /usr/local/aurora/bin/starman" /usr/local/aurora/bin/pacman"

                [ -f /usr/local/aurora//.bashrc" ] || touch /usr/local/aurora//.bashrc"

                FLATPAK_ENV_LINE='[ -f /usr/local/aurora/.flatpak.env" ] && . /usr/local/aurora/.flatpak.env"'
                FLATPAK_LOGIC_LINE='[ -f /usr/local/aurora/.flatpak.logic" ] && . /usr/local/aurora/.flatpak.logic"'
                
                grep -Fxq "$FLATPAK_ENV_LINE" /usr/local/aurora//.bashrc" || echo "$FLATPAK_ENV_LINE" >> /usr/local/aurora//.bashrc"
                grep -Fxq "$FLATPAK_LOGIC_LINE" /usr/local/aurora//.bashrc" || echo "$FLATPAK_LOGIC_LINE" >> /usr/local/aurora//.bashrc"

                echo ""
                echo "${GREEN}Quick reinstall completed. Open a new vsh borealis tab to finish.${RESET}"
                echo ""
                ;;
            2)
                echo ""
                echo "${YELLOW}Launching full reinstall...${RESET}"
                bash <(curl -s "https://raw.githubusercontent.com/shadowed1/Aurora/main/aurora_installer.sh?$(date +%s)")
                ;;
            *)
                echo "${RED}Invalid choice. Please enter 0, 1, or 2.${RESET}"
                exit 1
                ;;
        esac
        ;;
    uninstall)
        aurora_uninstall
        ;;
    # Denny's version checker
    version)
    if [[ -f /usr/local/aurora/bin/version" ]]; then
        CURRENT_VER=$(cat /usr/local/aurora/bin/version")
        CURRENT_VER_NO=$(echo "$CURRENT_VER" | sed -e 's/VERSION=//' -e 's/"//g' -e 's/\.//g' -e 's/^0*//')

        LATEST_VER=$(curl -Ls "https://raw.githubusercontent.com/shadowed1/Aurora/main/version")
        LATEST_VER_NO=$(echo "$LATEST_VER" | sed -e 's/VERSION=//' -e 's/"//g' -e 's/\.//g' -e 's/^0*//')

        if [[ "$CURRENT_VER_NO" =~ ^[0-9]+$ && "$LATEST_VER_NO" =~ ^[0-9]+$ ]]; then
            if (( 10#$CURRENT_VER_NO < 10#$LATEST_VER_NO )); then
                echo "${CYAN}You're using $CURRENT_VER which is NOT the latest version.${RESET}"
                read -rp "Would you like to 'reinstall' to get $LATEST_VER ? (Y/n): " choice
                if [[ "$choice" =~ ^[Yy]$ || -z "$choice" ]]; then
                    echo "${CYAN}Reinstalling!${RESET}"
                    bash <(curl -s "https://raw.githubusercontent.com/shadowed1/Aurora/main/aurora_installer.sh?$(date +%s)")
                else
                    echo "${YELLOW}Skipping reinstall.${RESET}"
                fi
            else
                echo "${GREEN}You're using $CURRENT_VER which is up-to-date, so you're good.${RESET}"
            fi
        else
            echo "${RED}Version check failed. One of the version numbers is invalid.${RESET}"
        fi
    else
        echo "${RED}Version file not found.${RESET}"
        exit 1
    fi
        ;;
esac
